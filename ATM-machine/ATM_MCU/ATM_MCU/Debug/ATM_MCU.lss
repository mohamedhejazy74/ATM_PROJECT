
ATM_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e0  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ce  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000081b  00000000  00000000  00001efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000770  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000068e  00000000  00000000  00002f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000361e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
spi_config_t spi_config;
spi_slave_config_t spi_slave_config;
uint8_t data =0;
int main(void)
{
	spi_config.spi_interrupt_config = SPI_INT_DISABLE;
  7c:	e3 e6       	ldi	r30, 0x63	; 99
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	10 82       	st	Z, r1
	spi_config.spi_state_config = SPI_ENABLE;
  82:	c1 e0       	ldi	r28, 0x01	; 1
  84:	c1 83       	std	Z+1, r28	; 0x01
	spi_config.spi_data_order_config = SPI_MSB;
  86:	12 82       	std	Z+2, r1	; 0x02
	spi_config.spi_mode_config = SPI_MASTER;
  88:	c3 83       	std	Z+3, r28	; 0x03
	spi_config.spi_polarity_config = SPI_IDLE_LOW;
  8a:	14 82       	std	Z+4, r1	; 0x04
	spi_config.spi_chpa_config = SPI_SAMLING_ON_LEADING_EDGE;
  8c:	15 82       	std	Z+5, r1	; 0x05
	spi_config.spi_prescaller_config = SPI_PRESCALER_4;
  8e:	16 82       	std	Z+6, r1	; 0x06
	spi_init(&spi_config);
  90:	cf 01       	movw	r24, r30
  92:	0e 94 3e 01 	call	0x27c	; 0x27c <spi_init>
	
	spi_slave_config.spi_slave_port = portb;
  96:	e1 e6       	ldi	r30, 0x61	; 97
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	c0 83       	st	Z, r28
	spi_slave_config.spi_slave_pin = pin4;
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	81 83       	std	Z+1, r24	; 0x01
	spi_slave_CE_init(&spi_slave_config);
  a0:	cf 01       	movw	r24, r30
  a2:	0e 94 ad 01 	call	0x35a	; 0x35a <spi_slave_CE_init>
    /* Replace with your application code */
    while (1) 
    {
		spi_enable_slave(&spi_slave_config);
  a6:	81 e6       	ldi	r24, 0x61	; 97
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 da 01 	call	0x3b4	; 0x3b4 <spi_enable_slave>
		spi_read(&data);
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 c2 01 	call	0x384	; 0x384 <spi_read>
		data++;
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f e9       	ldi	r18, 0x9F	; 159
  c2:	86 e8       	ldi	r24, 0x86	; 134
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x4a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x54>
  d0:	00 00       	nop
		_delay_ms(500);
		spi_read(&data);
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 c2 01 	call	0x384	; 0x384 <spi_read>
		data++;
  da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		spi_read(&data);
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 c2 01 	call	0x384	; 0x384 <spi_read>
		data++;
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		spi_read(&data);
  f6:	80 e6       	ldi	r24, 0x60	; 96
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 c2 01 	call	0x384	; 0x384 <spi_read>
		data++;
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		spi_disable_slave(&spi_slave_config);
 108:	81 e6       	ldi	r24, 0x61	; 97
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 ce 01 	call	0x39c	; 0x39c <spi_disable_slave>
 110:	ca cf       	rjmp	.-108    	; 0xa6 <main+0x2a>

00000112 <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 112:	68 30       	cpi	r22, 0x08	; 8
 114:	a0 f5       	brcc	.+104    	; 0x17e <DIO_init+0x6c>
	{
		if (port == porta)
 116:	81 11       	cpse	r24, r1
 118:	0b c0       	rjmp	.+22     	; 0x130 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 11a:	8a b3       	in	r24, 0x1a	; 26
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_init+0x12>
 120:	44 0f       	add	r20, r20
 122:	55 1f       	adc	r21, r21
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_init+0xe>
 128:	48 2b       	or	r20, r24
 12a:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret
		}
		else if (port == portb)
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	59 f4       	brne	.+22     	; 0x14a <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 134:	87 b3       	in	r24, 0x17	; 23
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_init+0x2c>
 13a:	44 0f       	add	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_init+0x28>
 142:	48 2b       	or	r20, r24
 144:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 95       	ret
		}
		else if (port == portc)
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	59 f4       	brne	.+22     	; 0x164 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 14e:	84 b3       	in	r24, 0x14	; 20
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_init+0x46>
 154:	44 0f       	add	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_init+0x42>
 15c:	48 2b       	or	r20, r24
 15e:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	08 95       	ret
		}
		else if (port == portd)
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	69 f4       	brne	.+26     	; 0x182 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 168:	81 b3       	in	r24, 0x11	; 17
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_init+0x60>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_init+0x5c>
 176:	48 2b       	or	r20, r24
 178:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 182:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 184:	08 95       	ret

00000186 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 186:	68 30       	cpi	r22, 0x08	; 8
 188:	08 f0       	brcs	.+2      	; 0x18c <DIO_writePIN+0x6>
 18a:	74 c0       	rjmp	.+232    	; 0x274 <DIO_writePIN+0xee>
	{
		if (port == porta)
 18c:	81 11       	cpse	r24, r1
 18e:	1b c0       	rjmp	.+54     	; 0x1c6 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	61 f4       	brne	.+24     	; 0x1ac <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 194:	2b b3       	in	r18, 0x1b	; 27
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_writePIN+0x1a>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_writePIN+0x16>
 1a4:	82 2b       	or	r24, r18
 1a6:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_writePIN+0x32>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_writePIN+0x2e>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
		}
		else if (port == portb)
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	d9 f4       	brne	.+54     	; 0x200 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 1ca:	41 30       	cpi	r20, 0x01	; 1
 1cc:	61 f4       	brne	.+24     	; 0x1e6 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 1ce:	28 b3       	in	r18, 0x18	; 24
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_writePIN+0x54>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_writePIN+0x50>
 1de:	82 2b       	or	r24, r18
 1e0:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 1e6:	28 b3       	in	r18, 0x18	; 24
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_writePIN+0x6c>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_writePIN+0x68>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	08 95       	ret
		}
		else if (port == portc)
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	d9 f4       	brne	.+54     	; 0x23a <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	61 f4       	brne	.+24     	; 0x220 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_writePIN+0x8e>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_writePIN+0x8a>
 218:	82 2b       	or	r24, r18
 21a:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 220:	25 b3       	in	r18, 0x15	; 21
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_writePIN+0xa6>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_writePIN+0xa2>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret
		}
		else if (port == portd)
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	e9 f4       	brne	.+58     	; 0x278 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
 23e:	41 30       	cpi	r20, 0x01	; 1
 240:	61 f4       	brne	.+24     	; 0x25a <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_writePIN+0xc8>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_writePIN+0xc4>
 252:	82 2b       	or	r24, r18
 254:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 25a:	22 b3       	in	r18, 0x12	; 18
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_writePIN+0xe0>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_writePIN+0xdc>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 278:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 27a:	08 95       	ret

0000027c <spi_init>:
		while(READ_BIT(SPSR_ADD,SPI_SPIF) == 0);
		*recieved_data = SPDR_ADD;

	}
	return ret;
}
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	09 f4       	brne	.+2      	; 0x286 <spi_init+0xa>
 284:	66 c0       	rjmp	.+204    	; 0x352 <spi_init+0xd6>
 286:	ec 01       	movw	r28, r24
 288:	8b 81       	ldd	r24, Y+3	; 0x03
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	c9 f4       	brne	.+50     	; 0x2c0 <spi_init+0x44>
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	64 e0       	ldi	r22, 0x04	; 4
 292:	0e 94 89 00 	call	0x112	; 0x112 <DIO_init>
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_writePIN>
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	65 e0       	ldi	r22, 0x05	; 5
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 89 00 	call	0x112	; 0x112 <DIO_init>
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	67 e0       	ldi	r22, 0x07	; 7
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 89 00 	call	0x112	; 0x112 <DIO_init>
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	66 e0       	ldi	r22, 0x06	; 6
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 89 00 	call	0x112	; 0x112 <DIO_init>
 2be:	16 c0       	rjmp	.+44     	; 0x2ec <spi_init+0x70>
 2c0:	81 11       	cpse	r24, r1
 2c2:	14 c0       	rjmp	.+40     	; 0x2ec <spi_init+0x70>
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	64 e0       	ldi	r22, 0x04	; 4
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 89 00 	call	0x112	; 0x112 <DIO_init>
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	65 e0       	ldi	r22, 0x05	; 5
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 89 00 	call	0x112	; 0x112 <DIO_init>
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	67 e0       	ldi	r22, 0x07	; 7
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 89 00 	call	0x112	; 0x112 <DIO_init>
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	66 e0       	ldi	r22, 0x06	; 6
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 89 00 	call	0x112	; 0x112 <DIO_init>
 2ec:	6a 81       	ldd	r22, Y+2	; 0x02
 2ee:	80 e2       	ldi	r24, 0x20	; 32
 2f0:	68 9f       	mul	r22, r24
 2f2:	f0 01       	movw	r30, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	9b 81       	ldd	r25, Y+3	; 0x03
 2f8:	80 e1       	ldi	r24, 0x10	; 16
 2fa:	98 9f       	mul	r25, r24
 2fc:	b0 01       	movw	r22, r0
 2fe:	11 24       	eor	r1, r1
 300:	98 81       	ld	r25, Y
 302:	80 e8       	ldi	r24, 0x80	; 128
 304:	98 9f       	mul	r25, r24
 306:	a0 01       	movw	r20, r0
 308:	11 24       	eor	r1, r1
 30a:	9d 81       	ldd	r25, Y+5	; 0x05
 30c:	29 2f       	mov	r18, r25
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	9c 81       	ldd	r25, Y+4	; 0x04
 31a:	89 2f       	mov	r24, r25
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	9e 81       	ldd	r25, Y+6	; 0x06
 32c:	6e 2b       	or	r22, r30
 32e:	46 2b       	or	r20, r22
 330:	24 2b       	or	r18, r20
 332:	82 2b       	or	r24, r18
 334:	89 2b       	or	r24, r25
 336:	8d b9       	out	0x0d, r24	; 13
 338:	9e b1       	in	r25, 0x0e	; 14
 33a:	8e 81       	ldd	r24, Y+6	; 0x06
 33c:	90 7f       	andi	r25, 0xF0	; 240
 33e:	86 95       	lsr	r24
 340:	86 95       	lsr	r24
 342:	86 95       	lsr	r24
 344:	89 2b       	or	r24, r25
 346:	8e b9       	out	0x0e, r24	; 14
 348:	8d b1       	in	r24, 0x0d	; 13
 34a:	80 64       	ori	r24, 0x40	; 64
 34c:	8d b9       	out	0x0d, r24	; 13
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	01 c0       	rjmp	.+2      	; 0x354 <spi_init+0xd8>
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <spi_slave_CE_init>:
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	00 97       	sbiw	r24, 0x00	; 0
 360:	69 f0       	breq	.+26     	; 0x37c <spi_slave_CE_init+0x22>
 362:	ec 01       	movw	r28, r24
 364:	41 e0       	ldi	r20, 0x01	; 1
 366:	69 81       	ldd	r22, Y+1	; 0x01
 368:	88 81       	ld	r24, Y
 36a:	0e 94 89 00 	call	0x112	; 0x112 <DIO_init>
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	69 81       	ldd	r22, Y+1	; 0x01
 372:	88 81       	ld	r24, Y
 374:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_writePIN>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	01 c0       	rjmp	.+2      	; 0x37e <spi_slave_CE_init+0x24>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <spi_read>:
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	41 f0       	breq	.+16     	; 0x398 <spi_read+0x14>
 388:	1f b8       	out	0x0f, r1	; 15
 38a:	77 9b       	sbis	0x0e, 7	; 14
 38c:	fe cf       	rjmp	.-4      	; 0x38a <spi_read+0x6>
 38e:	2f b1       	in	r18, 0x0f	; 15
 390:	fc 01       	movw	r30, r24
 392:	20 83       	st	Z, r18
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	08 95       	ret
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	08 95       	ret

0000039c <spi_disable_slave>:


SPIErrorsType spi_disable_slave(spi_slave_config_t *spi_slave_config){
	SPIErrorsType ret = E_OK;
	if( spi_slave_config == NULL){
 39c:	00 97       	sbiw	r24, 0x00	; 0
 39e:	41 f0       	breq	.+16     	; 0x3b0 <spi_disable_slave+0x14>
 3a0:	fc 01       	movw	r30, r24
		ret =E_NOT_OK;
	}
	else{
		DIO_writePIN (spi_slave_config->spi_slave_port, spi_slave_config->spi_slave_pin, STD_HIGH);
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	61 81       	ldd	r22, Z+1	; 0x01
 3a6:	80 81       	ld	r24, Z
 3a8:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_writePIN>
	return ret;
}


SPIErrorsType spi_disable_slave(spi_slave_config_t *spi_slave_config){
	SPIErrorsType ret = E_OK;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	08 95       	ret
	if( spi_slave_config == NULL){
		ret =E_NOT_OK;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		DIO_writePIN (spi_slave_config->spi_slave_port, spi_slave_config->spi_slave_pin, STD_HIGH);
	}
	return ret;
}
 3b2:	08 95       	ret

000003b4 <spi_enable_slave>:
SPIErrorsType spi_enable_slave(spi_slave_config_t *spi_slave_config){
	SPIErrorsType ret = E_OK;
	if( spi_slave_config == NULL){
 3b4:	00 97       	sbiw	r24, 0x00	; 0
 3b6:	41 f0       	breq	.+16     	; 0x3c8 <spi_enable_slave+0x14>
 3b8:	fc 01       	movw	r30, r24
		ret =E_NOT_OK;
	}
	else{
		DIO_writePIN (spi_slave_config->spi_slave_port, spi_slave_config->spi_slave_pin, STD_LOW);
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	61 81       	ldd	r22, Z+1	; 0x01
 3be:	80 81       	ld	r24, Z
 3c0:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_writePIN>
		DIO_writePIN (spi_slave_config->spi_slave_port, spi_slave_config->spi_slave_pin, STD_HIGH);
	}
	return ret;
}
SPIErrorsType spi_enable_slave(spi_slave_config_t *spi_slave_config){
	SPIErrorsType ret = E_OK;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	08 95       	ret
	if( spi_slave_config == NULL){
		ret =E_NOT_OK;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		DIO_writePIN (spi_slave_config->spi_slave_port, spi_slave_config->spi_slave_pin, STD_LOW);
	}
	return ret;
 3ca:	08 95       	ret

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
